service: jung2bot

frameworkVersion: '>=2.28.7 <3.0.0'

provider:
  name: aws
  runtime: nodejs14.x
  versionFunctions: false
  stage: ${env:STAGE}
  region: ${env:REGION}
  profile: ${env:PROFILE}
  logRetentionInDays: 1
  deploymentBucket:
    serverSideEncryption: AES256
  environment:
    LOG_LEVEL: ${env:LOG_LEVEL, 'error'}
    TELEGRAM_BOT_TOKEN: ${ssm:${self:service}-${self:provider.stage}-telegram-api-token~true}
    MESSAGE_TABLE: ${self:service}-${self:provider.stage}-messages
    CHATID_TABLE: ${self:service}-${self:provider.stage}-chatIds
    EVENT_QUEUE_URL: !Ref EventQueue
    SCALE_UP_READ_CAPACITY: ${self:custom.jung2bot.scaleUpBeforeOffFromWork.ReadCapacityUnits.${self:provider.stage}, 1}
  tags:
    Name: jung2bot
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - 'dynamodb:*'
          Resource:
            - !GetAtt Jung2BotDynamoDB.Arn
            - !GetAtt ChatIDsDynamoDB.Arn
        - Effect: Allow
          Action:
            - 'sqs:SendMessage'
          Resource:
            - !GetAtt EventQueue.Arn

functions:
  messages:
    handler: src/handler.onMessage
    # 2019-05-18 onMessage:
    # min: 104.9042 mb
    # avg: 174.0444 mb
    # max: 183.1055 mb
    # peak duration: 9.1s
    timeout: 10
    memorySize: 192
    events:
      - httpApi:
          path: /
          method: post
  offFromWork:
    handler: src/handler.onOffFromWork
    # 2019-05-18 onOffFromWork:
    # min: 126.8387 mb
    # avg: 155.6873 mb
    # max: 183.1055 mb
    # peak duration: 88.4s
    timeout: 600
    memorySize: 256
    tracing: Active
    events:
      - schedule: cron(59 9 ? * MON-FRI *) # 9:59 am UTC = 5:59 pm HKT
  queryEvent:
    handler: src/handler.onEvent
    # 2019-05-18 onEvent:
    # min: 108.7189 mb
    # avg: 196.4851 mb
    # max: 242.2333 mb
    # peak duration: 53.6s
    timeout: 90
    memorySize: 320
    # https://core.telegram.org/bots/faq#my-bot-is-hitting-limits-how-do-i-avoid-this
    # If you're sending bulk notifications to multiple users, the API will not allow more than 30 messages
    # per second or so. Consider spreading out notifications over large intervals of 8â€”12 hours for best results.
    # Also note that your bot will not be able to send more than 20 messages per minute to the same group.
    #
    # Cloudformation will return `ResourceConflictException` exception if the reservedConcurrency is changed.
    # Workaround will be manually changing the `reservedConcurrency` in the console and deploy.
    # Reference: https://github.com/serverless/serverless/issues/4964#issuecomment-406570150
    reservedConcurrency: ${self:custom.jung2bot.queryEvent.reservedConcurrency.${self:provider.stage}, 1}
    tracing: Active
    events:
      - sqs:
          arn: !GetAtt EventQueue.Arn
  scaleUpBeforeOffFromWork:
    handler: src/handler.onScaleUp
    # 2019-05-18 scaleUpBeforeOffFromWork:
    # min: 115.3946 mb
    # avg: 121.7524 mb
    # max: 122.0703 mb
    # peak duration: 3.6s
    timeout: 10
    memorySize: 192
    tracing: Active
    events:
      - schedule: cron(53-59 9 ? * MON-FRI *) # 9:53-59 am UTC = 5:53-59 pm HKT

plugins:
  - serverless-dotenv-plugin
  - serverless-plugin-dynamodb-autoscaling
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline

custom:
  # jung2bot
  # Intrinsic functions is not working within the functions block
  # Reference: https://stackoverflow.com/a/54065636/837059
  jung2bot:
    scaleUpBeforeOffFromWork:
      ReadCapacityUnits:
        local: 1
        dev: 1
        prod: 500
    queryEvent:
      reservedConcurrency:
        local: 1
        dev: 5
        prod: 100
  # serverless-dynamodb-local
  dynamodb:
    start:
      seed: true
      migrate: true
    seed:
      domain:
        sources:
          - table: ${self:service}-${self:provider.stage}-messages
            sources: [ ./test/helper/dynamodbMessagesSeed.json ]
          - table: ${self:service}-${self:provider.stage}-chatIds
            sources: [ ./test/helper/dynamodbChatIdSeed.json ]
  # serverless-plugin-dynamodb-autoscaling
  dynamodbAutoscaling:
    tablesConfig:
      Jung2BotDynamoDB:
        minCapacity: 1
        maxCapacity: 1000
      ChatIDsDynamoDB:
        minCapacity: 1
        maxCapacity: 1000

resources:
  Resources:
    # Messages DynamoDB Table
    Jung2BotDynamoDB:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: chatId
            AttributeType: N
          - AttributeName: dateCreated
            AttributeType: S
        KeySchema:
          - AttributeName: chatId
            KeyType: HASH
          - AttributeName: dateCreated
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true
        TableName: ${self:service}-${self:provider.stage}-messages
    # ChatId DynamoDB Table
    ChatIDsDynamoDB:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: chatId
            AttributeType: N
        KeySchema:
          - AttributeName: chatId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true
        TableName: ${self:service}-${self:provider.stage}-chatIds
    # SQS for handling query events
    EventQueue:
      Type: AWS::SQS::Queue
      Properties:
        VisibilityTimeout: 100
        KmsDataKeyReusePeriodSeconds: 86400
        KmsMasterKeyId: alias/aws/sqs
